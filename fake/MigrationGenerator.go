// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/phogolabs/prana/sqlmigr"
)

type MigrationGenerator struct {
	CreateStub        func(m *sqlmigr.Migration) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		m *sqlmigr.Migration
	}
	createReturns struct {
		result1 error
	}
	WriteStub        func(m *sqlmigr.Migration, content *sqlmigr.Content) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		m       *sqlmigr.Migration
		content *sqlmigr.Content
	}
	writeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MigrationGenerator) Create(m *sqlmigr.Migration) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		m *sqlmigr.Migration
	}{m})
	fake.recordInvocation("Create", []interface{}{m})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(m)
	}
	return fake.createReturns.result1
}

func (fake *MigrationGenerator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *MigrationGenerator) CreateArgsForCall(i int) *sqlmigr.Migration {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].m
}

func (fake *MigrationGenerator) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationGenerator) Write(m *sqlmigr.Migration, content *sqlmigr.Content) error {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		m       *sqlmigr.Migration
		content *sqlmigr.Content
	}{m, content})
	fake.recordInvocation("Write", []interface{}{m, content})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(m, content)
	}
	return fake.writeReturns.result1
}

func (fake *MigrationGenerator) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *MigrationGenerator) WriteArgsForCall(i int) (*sqlmigr.Migration, *sqlmigr.Content) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].m, fake.writeArgsForCall[i].content
}

func (fake *MigrationGenerator) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *MigrationGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmigr.MigrationGenerator = new(MigrationGenerator)
