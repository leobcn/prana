// This file was generated by counterfeiter
package fake

import (
	"io"
	"sync"

	"github.com/phogolabs/prana/sqlmodel"
)

type ModelComposer struct {
	ComposeStub        func(pkg string, sch *sqlmodel.Schema) (io.Reader, error)
	composeMutex       sync.RWMutex
	composeArgsForCall []struct {
		pkg string
		sch *sqlmodel.Schema
	}
	composeReturns struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ModelComposer) Compose(pkg string, sch *sqlmodel.Schema) (io.Reader, error) {
	fake.composeMutex.Lock()
	fake.composeArgsForCall = append(fake.composeArgsForCall, struct {
		pkg string
		sch *sqlmodel.Schema
	}{pkg, sch})
	fake.recordInvocation("Compose", []interface{}{pkg, sch})
	fake.composeMutex.Unlock()
	if fake.ComposeStub != nil {
		return fake.ComposeStub(pkg, sch)
	}
	return fake.composeReturns.result1, fake.composeReturns.result2
}

func (fake *ModelComposer) ComposeCallCount() int {
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return len(fake.composeArgsForCall)
}

func (fake *ModelComposer) ComposeArgsForCall(i int) (string, *sqlmodel.Schema) {
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return fake.composeArgsForCall[i].pkg, fake.composeArgsForCall[i].sch
}

func (fake *ModelComposer) ComposeReturns(result1 io.Reader, result2 error) {
	fake.ComposeStub = nil
	fake.composeReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *ModelComposer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return fake.invocations
}

func (fake *ModelComposer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmodel.Composer = new(ModelComposer)
