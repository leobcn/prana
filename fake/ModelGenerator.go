// This file was generated by counterfeiter
package fake

import (
	"io"
	"sync"

	"github.com/phogolabs/prana/sqlmodel"
)

type ModelGenerator struct {
	GenerateModelStub        func(pkg string, sch *sqlmodel.Schema) (io.Reader, error)
	generateModelMutex       sync.RWMutex
	generateModelArgsForCall []struct {
		pkg string
		sch *sqlmodel.Schema
	}
	generateModelReturns struct {
		result1 io.Reader
		result2 error
	}
	GenerateSQLScriptStub        func(sch *sqlmodel.Schema) (io.Reader, error)
	generateSQLScriptMutex       sync.RWMutex
	generateSQLScriptArgsForCall []struct {
		sch *sqlmodel.Schema
	}
	generateSQLScriptReturns struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ModelGenerator) GenerateModel(pkg string, sch *sqlmodel.Schema) (io.Reader, error) {
	fake.generateModelMutex.Lock()
	fake.generateModelArgsForCall = append(fake.generateModelArgsForCall, struct {
		pkg string
		sch *sqlmodel.Schema
	}{pkg, sch})
	fake.recordInvocation("GenerateModel", []interface{}{pkg, sch})
	fake.generateModelMutex.Unlock()
	if fake.GenerateModelStub != nil {
		return fake.GenerateModelStub(pkg, sch)
	}
	return fake.generateModelReturns.result1, fake.generateModelReturns.result2
}

func (fake *ModelGenerator) GenerateModelCallCount() int {
	fake.generateModelMutex.RLock()
	defer fake.generateModelMutex.RUnlock()
	return len(fake.generateModelArgsForCall)
}

func (fake *ModelGenerator) GenerateModelArgsForCall(i int) (string, *sqlmodel.Schema) {
	fake.generateModelMutex.RLock()
	defer fake.generateModelMutex.RUnlock()
	return fake.generateModelArgsForCall[i].pkg, fake.generateModelArgsForCall[i].sch
}

func (fake *ModelGenerator) GenerateModelReturns(result1 io.Reader, result2 error) {
	fake.GenerateModelStub = nil
	fake.generateModelReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *ModelGenerator) GenerateSQLScript(sch *sqlmodel.Schema) (io.Reader, error) {
	fake.generateSQLScriptMutex.Lock()
	fake.generateSQLScriptArgsForCall = append(fake.generateSQLScriptArgsForCall, struct {
		sch *sqlmodel.Schema
	}{sch})
	fake.recordInvocation("GenerateSQLScript", []interface{}{sch})
	fake.generateSQLScriptMutex.Unlock()
	if fake.GenerateSQLScriptStub != nil {
		return fake.GenerateSQLScriptStub(sch)
	}
	return fake.generateSQLScriptReturns.result1, fake.generateSQLScriptReturns.result2
}

func (fake *ModelGenerator) GenerateSQLScriptCallCount() int {
	fake.generateSQLScriptMutex.RLock()
	defer fake.generateSQLScriptMutex.RUnlock()
	return len(fake.generateSQLScriptArgsForCall)
}

func (fake *ModelGenerator) GenerateSQLScriptArgsForCall(i int) *sqlmodel.Schema {
	fake.generateSQLScriptMutex.RLock()
	defer fake.generateSQLScriptMutex.RUnlock()
	return fake.generateSQLScriptArgsForCall[i].sch
}

func (fake *ModelGenerator) GenerateSQLScriptReturns(result1 io.Reader, result2 error) {
	fake.GenerateSQLScriptStub = nil
	fake.generateSQLScriptReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *ModelGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateModelMutex.RLock()
	defer fake.generateModelMutex.RUnlock()
	fake.generateSQLScriptMutex.RLock()
	defer fake.generateSQLScriptMutex.RUnlock()
	return fake.invocations
}

func (fake *ModelGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmodel.ModelGenerator = new(ModelGenerator)
