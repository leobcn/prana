// This file was generated by counterfeiter
package fake

import (
	"io"
	"sync"

	"github.com/phogolabs/prana/sqlmodel"
)

type ModelGenerator struct {
	GenerateStub        func(ctx *sqlmodel.GeneratorContext) (io.Reader, error)
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		ctx *sqlmodel.GeneratorContext
	}
	generateReturns struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ModelGenerator) Generate(ctx *sqlmodel.GeneratorContext) (io.Reader, error) {
	fake.generateMutex.Lock()
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		ctx *sqlmodel.GeneratorContext
	}{ctx})
	fake.recordInvocation("Generate", []interface{}{ctx})
	fake.generateMutex.Unlock()
	if fake.GenerateStub != nil {
		return fake.GenerateStub(ctx)
	}
	return fake.generateReturns.result1, fake.generateReturns.result2
}

func (fake *ModelGenerator) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *ModelGenerator) GenerateArgsForCall(i int) *sqlmodel.GeneratorContext {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return fake.generateArgsForCall[i].ctx
}

func (fake *ModelGenerator) GenerateReturns(result1 io.Reader, result2 error) {
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *ModelGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return fake.invocations
}

func (fake *ModelGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmodel.Generator = new(ModelGenerator)
